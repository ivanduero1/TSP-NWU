backtracking -- pseudocode

input : 2 parameters -- names of cities, distances between cities
  - credits to linh, ghaith, and dallen for making the code that made the distances between cities accessible via dictionary
output : best route and how long the route took
  - should be *8* cities, because of the loop back
    -i.e. travelling ABCD should make u end up at A to "finish the loop"
      -im just typing this so i don't forget when i actually do code this

general formatting
-two functions
  -function1 -- "tsp_backtracking(cities_name,cities_distances)""
    -should just get the distances and the names of the cities, put them into a list, then put them into the "actual" backtracking code
    -after backtracking is done, print out the best route and best distance

  -function2 -- "backtracking(current_cities, remaining_cities, distances, total)""
    -basically subset_sum and tilings combined(?)
    -recursion beacuse of current cities occurs constantly, if else statment to have backtracking be able to occur

-- actual psudocode --

def backtracking(current_list, remaining_cities, distances_dict_file, total):

  if len(current_list) == 7:

    add last city on list -- first city to complete the loop
    add the distance from the last city to the first city to complete the total

    if this route is shorter than the main route:

      make new route and new distance the main routes

  else:

    for cities_left in remaining_cities:

      copy_current_cities
      copy_remaining_cities

      add the first copy_remaining_city to copy_current_cities
      remove the city added to copy_current_cities from the copy_remaining_cities

      if copy_current_cities > 1:
        find distances between the last 2 cities
        add them to the total

      if copy_current_cities <= 7:

        backtracking(all the copies, distance, and total)

def tsp_backtracking(cities_names, cities_distances)

  cities_names is now a list
  cities_distances is now a dictionary

  function calling ^^

  backtracking([],cities_names, cities_distances, 0)

  print best route and its distance



  
